
import Data.Maybe
import Objects.Matrices
import Numbers.Modular
import Numbers.Euclidean
import Cipher

key :: Matrix (Modulo Int)
key = map (map (Mod 26)) [[2, 0, 7], [5, 1, 22], [0, 3, 18 ]]
key' :: Matrix (Modulo Int)
key' = map (map (Mod 26)) [[12, 11, 5], [16, 4, 25], [19, 8, 6]]

msg = map (mod2char.(+ Mod 26 32).char2mod) "CGLIZWNFAQRIRRQIVGQVOSRCVLQYBRKXPIKQOFBQKMYMFEXN"

k = map (map (Mod 26)) $  
  [[ 5,  0,  0, 11,  0,  0, 14,  0,  0,  1],
   [ 2,  0,  0,  4,  0,  0, 17,  0,  0,  3],
   [ 0,  5,  0,  0, 11,  0,  0, 14,  0, 13],
   [ 0, 22,  0,  0,  4,  0,  0, 17,  0, 12],
   [ 0,  0,  5,  0,  0, 11,  0,  0, 14,  0],
   [ 0,  0, 22,  0,  0,  4,  0,  0, 17,  7]]

m = map (map (Mod 26)) [[19,  0 ,   7,  0, 10],
                        [ 7,  0 ,   4,  0, 21],
                        [ 0, 19 ,   0,  7, 23],
                        [ 0,  7 ,   0,  4, 25]]


s = "2 & 6 & 11 & 8 & 25 & 22 & 13 & 5 & 0 & 16 & 17 & 8 & 17 & 17 & 16 & 8 & 21 & 6 & 16 & 21 & 14 & 18 & 17 & 2 & 21 & 11 & 16 & 24 & 1 & 17 & 10 & 23 & 15 & 8 & 10 & 16 & 14 & 5 & 1 & 16 & 10 & 12 & 24 & 12 & 13 & 5 & 4 & 23 & 13"

t = "17 & 4 & 18 & 4 & 0 & 17 & 2 & 7 & 8 & 18 & 22 & 7 & 0 & 19 & 8 & 0 & 12 & 3 & 14 & 8 & 13 & 6 & 22 & 7 & 4 & 13 & 8 & 3 & 14 & 13 & 19 & 10 & 13 & 14 & 22 & 22 & 7 & 0 & 19 & 8 & 0 & 12 & 3 & 14 & 8 & 13 & 6 & 23"
